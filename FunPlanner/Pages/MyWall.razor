@page "/my-wall"
@using System.Net.Http.Json
@using Blazored.LocalStorage
@using FunPlanner.Components
@using FunPlanner.Models
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Dtos
@using FunPlannerShared.Data.Entities
@inject IPersonController personController
@inject INoteController noteController
@inject IAwardController awardController
@inject ILocalStorageService storage
@inject HttpClient httpClient
@inject IDialogService DialogService

<MudText Class="mb-3" Align="Align.Left" Typo="Typo.h2">Moje osiągnięcia</MudText>
<MudDivider />

<MudGrid>
    <MudItem xs="12">
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem xs="6">
                <MudPaper Style="height:60em;">

                    <MudText Align="Align.Center" Typo="Typo.h3">Notatki</MudText> <MudDivider />
                    @if (notes != null && notes.Count() > 0)
                    {
                        foreach (var n in notes)
                        {
                            <MudText>@n.Content</MudText>
                            <MudText>Notatka od: @n.FromFirstName @n.FromLastName</MudText>
                        }
                    }
                    else
                    {
                        <MudText>Niestety jeszcze nikt nie dodał dla ciebie notatki :(</MudText>
                    }

                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudPaper Style="height:60em;">

                    <MudText Align="Align.Center" Typo="Typo.h3">Nagrody</MudText> <MudDivider />
                    @if (awards != null && awards.Count() > 0)
                    {
                        foreach (var a in awards)
                        {
                            <MudText>@a.AwardType</MudText>
                            <MudText>nagroda za wydarzenie: @a.CalendarEventName</MudText>
                        }
                    }
                    else
                    {
                        <MudText>Niestety jeszcze nie dostałeś żadnej nagrody :(</MudText>
                    }

                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@*<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
    <MudTh>Użytkownik</MudTh>
    <MudTh>Punkty</MudTh>
    <MudTh>Dodaj notkę</MudTh>
    </HeaderContent>
    <RowTemplate>
    <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
    <MudTd DataLabel="Points">@context.Points</MudTd>
    <MudTd><MudButton OnClick="() => AddNote(context.Id)">Dodaj notatkę</MudButton></MudTd>
    </RowTemplate>
    </MudTable>*@





@code {
    private ICollection<AwardDto> awards = new List<AwardDto>();
    private ICollection<NoteDto> notes = new List<NoteDto>();

    protected override async Task OnInitializedAsync()
    {
        UserStorageDto userDto = await storage.GetItemAsync<UserStorageDto>("user").AsTask();
        awards = await awardController.GetByPersonId(userDto.Id);
        notes = await noteController.GetAllByPersonId(userDto.Id);
    }

    private async Task AddNote(Guid personId)
    {
        //var parameters = new DialogParameters();
        //parameters.Add("PersonId", personId);
        //var dialog = DialogService.Show<AddNote>("Dodaj notatkę", parameters, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        //var result = await dialog.Result;
        //if (!result.Cancelled)
        //{
        //    Elements = await personController.Get();
        //    StateHasChanged();
        //}
    }
}