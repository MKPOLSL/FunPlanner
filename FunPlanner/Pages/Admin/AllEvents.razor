@page "/all-events"
@using Blazored.LocalStorage
@using FunPlanner.Components
@using FunPlanner.Models
@using FunPlanner.Models.Calendar
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Dtos
@using FunPlannerShared.Data.Entities
@using MudBlazor
@inject IPersonController person
@inject IEventController eventContoller
@inject IDialogService DialogService
@inject ILocalStorageService storage
@inject ISnackbar Snackbar

<PageTitle>My Events</PageTitle>
<MudText Class="mb-3" Align="Align.Left" Typo="Typo.h4">Wszystkie wydarzenia</MudText> <MudDivider />

<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Nazwa</MudTh>
        <MudTh>Twórca</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>Koniec</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Usuń wydarzenie</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nazwa">@context.Name</MudTd>
        <MudTd DataLabel="Twórca">@context.Creator.FirstName @context.Creator.LastName</MudTd>
        <MudTd DataLabel="Start" HideSmall="_hidePosition">@context.Start.ToString("f")</MudTd>
        <MudTd DataLabel="Koniec">@context.End.ToString("f")</MudTd>
        <MudTd DataLabel="Status">
            @if (context.End > DateTime.Now && context.Start < DateTime.Now)
            {
                <MudChip Color="Color.Info">W toku</MudChip>
            } 
            else if (context.Start > DateTime.Now)
            {
                <MudChip Color="Color.Success">Nadchodzące</MudChip>
            }
            else
            {
                <MudChip Color="Color.Error">Zakończone</MudChip>
            } 
        </MudTd>
        <MudTd DataLabel="Usunąć wydarzenie?">
           <MudButton Size="Size.Small" OnClick="() => DeleteEvent(context.Id)" Variant="Variant.Filled"  Color="Color.Primary">Usuń wydarzenie</MudButton> 
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private bool _hidePosition = false;
    private bool _loading;
    private ICollection<CalendarEventDto> Elements = new List<CalendarEventDto>();

    protected override async Task OnInitializedAsync()
    {
        UserStorageDto userDto = await storage.GetItemAsync<UserStorageDto>("user").AsTask();
        Elements = await eventContoller.Get();
    }

    private async Task DeleteEvent(Guid eventId)
    {
        await eventContoller.Delete(eventId);

        Snackbar.Add("Usunięto wydarzenie!", Severity.Success);
    }
}