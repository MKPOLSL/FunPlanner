@page "/"
@using FunPlanner.Components
@using FunPlanner.Models.Calendar
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Entities
@using MudBlazor
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject IPersonController person
@inject IDialogService DialogService

<AuthorizeView>
    <Authorized>
        <PageTitle>Index</PageTitle>

        <div class="row">
            <!-- Calendar -->
            <div class="col-sm-12 col-md-12 col-lg-9">
                <Calendar @ref="calendar">
                    <DayTemplate Context="day">
                        @{
                            string currentDayClass = day.Date == DateTime.Now.Date ? "current-day" : "";
                            string selectedDayClass = day == selectedDay ? "selected-day" : "";
                            const int maxDisplayedEvents = 2;
                        }
                        @if (!day.IsEmpty)
                        {
                            <div class="day @currentDayClass @selectedDayClass" @onclick="() => selectedDay = day">
                                <h3>@day.DayNumber</h3>
                                @if (day.Events != null && day.Events.Any())
                                {
                                    for (var i = 0; i < maxDisplayedEvents; ++i)
                                    {
                                        if (i >= day.Events.Count())
                                        {
                                            break;
                                        }
                                        var dayEvent = day.Events.ElementAt(i);
                                        <div class="day-event px-1 mb-1">
                                            @if (dayEvent.Name.Length > 25)
                                            {
                                                @dayEvent.Name.Substring(0, 25)

                                                <text>...</text>
                                            }
                                            else
                                            {
                                                @dayEvent.Name
                                            }
                                        </div>
                                    }

                                    if (day.Events.Count() > maxDisplayedEvents)
                                    {
                                        <text>+</text>
                                        @(day.Events.Count() - maxDisplayedEvents)
                                    }
                                }
                                <div class="day-add-event-btn">
                                    <MudIconButton Size="Size.Small" Color="Color.Secondary" Variant="Variant.Filled" Icon="@Icons.Filled.Add" OnClick="() => OpenDialog(day)" />
                                </div>
                            </div>
                        }
                    </DayTemplate>
                </Calendar>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <MudAlert NoIcon="true" Severity="Severity.Warning">Proszę się zalogować</MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private Calendar calendar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private Day selectedDay = new Day
        {
            Date = DateTime.Now
        };

    private async Task OpenDialog(Day day)
    {
        var parameters = new DialogParameters
        {
            { nameof(AddEventDialog.StartDate), day.Date },
            { nameof(AddEventDialog.EndDate), day.Date }
        };
        var dialog = DialogService.Show<AddEventDialog>("Dodaj wydarzenie", parameters, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            await calendar.Refresh();
        }
    }
 }