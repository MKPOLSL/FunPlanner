@page "/"
@using FunPlanner.Components
@using FunPlanner.Models.Calendar
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Entities
@using MudBlazor
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject IWeatherForecastController weather
@inject IPersonController person
@inject IDialogService DialogService

<AuthorizeView>
<Authorized>
<PageTitle>Index</PageTitle>

 <div class="row">
<!-- Calendar -->
        <div class="col-sm-12 col-md-12 col-lg-9">
            <Calendar>
                <DayTemplate Context="day">
                    @{
                        string currentDayClass = day.Date == DateTime.Now.Date ? "current-day" : "";
                        string selectedDayClass = day == selectedDay ? "selected-day" : "";
                    }
                    @if(!day.IsEmpty)
                    {
                        <div class="day shadow-effect @currentDayClass @selectedDayClass" @onclick="() => selectedDay = day">
                            <h3 class="ms-fontSize-24 ms-fontWeight-regular">@day.DayNumber</h3>
                            @if(day.Events != null && day.Events.Count != 0)
                            {
                                var firstEvent = day.Events.FirstOrDefault();
                                <div class="day-event">
                                    @if(firstEvent.Name.Length > 25)
                                    {
                                        @firstEvent.Name.Substring(0, 25)<text>...</text>
                                    }
                                    else
                                    {
                                         @firstEvent.Name
                                    }
                                </div>
                            }
                        </div>
                    }
                </DayTemplate>
            </Calendar>
       </div>


         <!-- Day Menu -->
        <div class="col-sm-12 col-md-12 col-lg-3">
            <AddEvent SelectedDay="@selectedDay" />

            <EventsList SelectedDay="@selectedDay" />
        </div>
 </div>

 <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Dodaj wydarzenie
</MudButton>

<MudButton OnClick="AddPerson" Variant="Variant.Filled" Color="Color.Primary">
    Dodaj osobę
</MudButton>

</Authorized>
    <NotAuthorized>
        <div>Proszę się zalogować</div>
    </NotAuthorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        var people = await person.Get();
        await base.OnInitializedAsync();
    }

    private Day selectedDay = new Day
    {
        Date = DateTime.Now
    };

    private void OpenDialog()
    {
        DialogService.Show<AddEventDialog>("Dodaj wydarzenie", new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
    }

    private async Task AddPerson()
    {
        var p = new Person
            {
                Id = Guid.NewGuid(),
                FirstName = "Mateusz",
                LastName = "Kulinowski",
                Email = "matkul@email.email",
                Points = 0
            };
        await person.Post(p);
    }
 }