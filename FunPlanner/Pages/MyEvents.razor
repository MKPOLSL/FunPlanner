@page "/my-events"
@using Blazored.LocalStorage
@using FunPlanner.Components
@using FunPlanner.Models
@using FunPlanner.Models.Calendar
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Dtos
@using FunPlannerShared.Data.Entities
@using MudBlazor
@inject IPersonController person
@inject IEventController eventContoller
@inject IDialogService DialogService
@inject ILocalStorageService storage

<PageTitle>My Events</PageTitle>
<MudText Class="mb-3" Align="Align.Left" Typo="Typo.h4">Moje wydarzenia</MudText> <MudDivider />

<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Nazwa</MudTh>
        <MudTh>Opis</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>Koniec</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Przyznaj nagrodę</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nazwa">@context.Name</MudTd>
        <MudTd DataLabel="Opis">@context.Description</MudTd>
        <MudTd DataLabel="Start" HideSmall="_hidePosition">@context.Start.ToString("f")</MudTd>
        <MudTd DataLabel="Koniec">@context.End.ToString("f")</MudTd>
        <MudTd DataLabel="Status">
            @if (context.End > DateTime.Now && context.Start < DateTime.Now)
            {
                <MudChip Color="Color.Info">W toku</MudChip>
            } 
            else if (context.Start > DateTime.Now)
            {
                <MudChip Color="Color.Success">Nadchodzące</MudChip>
            }
            else
            {
                <MudChip Color="Color.Error">Zakończone</MudChip>
            } 
        </MudTd>
        <MudTd DataLabel="Nagroda">
        @if (context.End > DateTime.Now)
            {
                <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="true" Color="Color.Primary">Nie zakończono</MudButton>
            }
            else if(context.Award != null)
            {
                <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="true" Color="Color.Primary">Już przyznano</MudButton>
            }
            else if(context.Participants.Any())
            {
                <MudButton Size="Size.Small" OnClick="() => AddAward(context.Id)" Variant="Variant.Filled"  Color="Color.Primary">Przyznaj nagrodę</MudButton>
            }
            else
            {
                <MudButton Size="Size.Small" Variant="Variant.Filled" Disabled="true" Color="Color.Primary">Brak uczestników</MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private bool _hidePosition = false;
    private bool _loading;
    private ICollection<CalendarEventDto> Elements = new List<CalendarEventDto>();

    protected override async Task OnInitializedAsync()
    {
        UserStorageDto userDto = await storage.GetItemAsync<UserStorageDto>("user").AsTask();
        Elements = await eventContoller.Get();
        Elements = Elements.Where(e => e.Creator.Id == userDto.Id).ToList();
    }

    private async Task AddAward(Guid eventId)
    {
        var parameters = new DialogParameters();
        parameters.Add("eventId", eventId);
        var dialog = DialogService.Show<AddAwardDialog>("Dodaj nagrodę", parameters, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Elements = await eventContoller.Get();
            StateHasChanged();
        }
    }
}