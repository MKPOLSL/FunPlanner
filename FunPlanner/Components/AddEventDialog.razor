@using FunPlannerShared.Controllers
@using MudBlazor
@using FunPlannerShared.Data.Entities
@inject ISnackbar Snackbar
@inject IEventController eventController
@inject CustomAuthStateProvider authStateProvider
@inject ILocalStorageService storage


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.BookmarkAdd" Class="mr-3 mb-n1"/>
            Nowe wydarzenie
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="newEvent.Name" Label="Nazwa wydarzenia" Variant="Variant.Text"></MudTextField>
        <MudTextField @bind-Value="newEvent.Description" Label="Opis" Variant="Variant.Text" Lines="4"></MudTextField>
        <MudTextField @bind-Value="newEvent.Place" Label="Miejsce wydarzenia" Variant="Variant.Text"></MudTextField>
        <MudDatePicker @bind-date="StartDate" Label="Start"/>
        <MudTimePicker Label="godzina" AmPm="false" @bind-Time="StartSpan"/>
        <MudDatePicker @bind-date="EndDate" Label="Koniec"/>
        <MudTimePicker Label="godzina" AmPm="false" @bind-Time="EndSpan"/>
        <MudSwitch @bind-Checked="IsLimited" Label="Limit uczestników" Color="Color.Primary" />
        <MudTextField T="int?" @bind-Value="newEvent.Limit" Label="Limit uczestników" Variant="Variant.Text" Disabled=@(!IsLimited)></MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Error" OnClick="AddEvent">Dodaj</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public CalendarEvent newEvent { get; set; } = new CalendarEvent();

    private TimeSpan? StartSpan { get; set; } = new TimeSpan(10, 15, 30);
    private TimeSpan? EndSpan { get; set; } = new TimeSpan(10, 15, 30);

    private DateTime? StartDate { get; set; } = DateTime.Now;
    private DateTime? EndDate { get; set; } = DateTime.Now;

    private bool IsLimited { get; set; } = false;
    private int? Limit { get; set; }

    private string Place { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task AddEvent()
    {
        if (StartDate == null || StartSpan == null || EndDate == null || EndSpan == null)
        {
            //tu throw bo niepełne dane
        }
        else
        {
            newEvent.Start = (DateTime)(StartDate + StartSpan);
            newEvent.End = (DateTime)(EndDate + EndSpan);
            var state = await authStateProvider.GetAuthenticationStateAsync();
            //storage.
            await eventController.Post(newEvent);
            Snackbar.Add("Dodano Wydarzenie", Severity.Success);
            MudDialog.Close(DialogResult.Ok(newEvent.Name));
        }
    }
}