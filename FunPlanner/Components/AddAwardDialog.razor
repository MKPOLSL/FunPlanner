@using Blazored.LocalStorage
@using FunPlanner.Colors
@using FunPlanner.Models
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Dtos
@using FunPlannerShared.Data.Enums
@using MudBlazor
@using FunPlannerShared.Data.Entities
@inject ISnackbar Snackbar
@inject IEventController eventController
@inject ILocalStorageService storage
@inject IPersonController personController
@inject IAwardController awardController
@inject AuthenticationStateProvider authStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.BookmarkAdd" Class="mr-3 mb-n1" />
            Dodaj nagrodę
        </MudText>
    </TitleContent>
    <DialogContent>
        <div>
            @if (persons != null && persons.Count() != 0)
            {
                <MudGrid>
                    <MudItem sm="6">
                        <MudPaper>
                            <MudList Clickable="true" @bind-SelectedValue="@selectedPersonId">
                                @foreach (PersonDto p in persons)
                                {
                                    <MudListItem Class="list-item" Value="p.Id">
                                        <MudAvatar Class="mr-2" Style="@MudColors.GetRandomColorCssBackground()">@p.FirstName[0]@p.LastName[0]</MudAvatar>
                                        @p.FirstName @p.LastName
                                    </MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    </MudItem>
                    <MudItem sm="6">
                        <MudPaper>
                            <MudList Clickable="true" @bind-SelectedValue="@selectedAwardType">
                                @foreach (AwardType at in Enum.GetValues(typeof(AwardType)))
                                {
                                    <MudListItem Class="list-item" Value="at">
                                        <MudAvatar Class="mr-2" Style="@MudColors.GetRandomColorCssBackground()">
                                            <MudIcon Icon="@Icons.Filled.AutoAwesome" />
                                        </MudAvatar>
                                        @at
                                    </MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudText>Niestety nikt nie zapisał się na to wydarzenie.</MudText>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Error" OnClick="AddAward">Dodaj</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [ParameterAttribute] public Guid eventId { get; set; }

    [Parameter] public AwardDto award { get; set; } = new();

    private ICollection<PersonDto> persons { get; set; }
    private CalendarEventDto calendarEvent { get; set; }

    private object selectedPersonId;
    private object selectedAwardType;

    protected override async Task OnInitializedAsync()
    {
        calendarEvent = await eventController.GetWithParticipants(eventId);
        persons = calendarEvent.Participants;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task AddAward()
    {
        if (selectedPersonId == null || selectedAwardType == null)
        {
            Snackbar.Add("Nie wybrano osoby lub nagrody!", Severity.Error);
            return;
        }

        await awardController.AddAward((Guid)selectedPersonId, eventId, (AwardType)selectedAwardType, "message");
        Snackbar.Add("Dodano nagrodę!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(eventId));
    }
}