@using FunPlanner.Models.Calendar
@using FunPlannerShared.Controllers
@using FunPlannerShared.Data.Dtos
@inject IEventController eventController

<div class="calendar">
    <div class="d-flex">
        <MudButton Variant="Variant.Text" StartIcon="@Icons.Filled.ChevronLeft" OnClick="() => MoveMonth(MoveDirection.Previous)">@selectedDate.AddMonths(-1).ToString("Y")</MudButton>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="flex-grow-1">@selectedDate.ToString("Y")</MudText>
        <MudButton Variant="Variant.Text" EndIcon="@Icons.Filled.ChevronRight" OnClick="() => MoveMonth(MoveDirection.Next)">@selectedDate.AddMonths(1).ToString("Y")</MudButton>
    </div>
    <table class="calendar-table">
        <thead>
            <tr>
                <th>Pon.</th>
                <th>Wt.</th>
                <th>Œr.</th>
                <th>Czw.</th>
                <th>Pt.</th>
                <th>Sob.</th>
                <th>Niedz.</th>
            </tr>
        </thead>
        <tbody>
            @for (int r = 0; r < rowsCount; r++)
            {
                <tr>
                    @foreach (var item in days.Skip(r * 7).Take(7))
                    {
                        <td>@DayTemplate(item)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        selectedYear = currentDate.Year;
        selectedMonth = currentDate.Month;
        selectedDate = new DateTime(selectedYear, selectedMonth, 1);

        Events = await eventController.GetForCalendar();

        UpdateCalendar();
    }

    private DateTime currentDate = DateTime.Now;
    private int selectedYear = 0;
    private int selectedMonth = 0;

    private int SelectedYear
    {
        get => selectedYear;
        set
        {
            selectedYear = value;
            UpdateCalendar();
        }
    }

    private int SelectedMonth
    {
        get => selectedMonth;
        set
        {
            selectedMonth = value;
            UpdateCalendar();
        }
    }

    private Day selectedDay = new Day
        {
            Date = DateTime.Now
        };

    private DateTime selectedDate;

    [Parameter]
    public RenderFragment<Day> DayTemplate { get; set; }
    private ICollection<CalendarEventCalendarDto> Events { get; set; }
    private List<Day> days = new();
    private int rowsCount = 0;

    void UpdateCalendar()
    {
        days = new List<Day>();

        //calculate the number of empty days
        var firstDayDate = new DateTime(SelectedYear, SelectedMonth, 1);
        selectedDate = firstDayDate;
        int weekDayNumber = (int)firstDayDate.DayOfWeek;
        int numberOfEmptyDays = weekDayNumber - 1;

        //add empty days
        for (int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new Day
                {
                    DayNumber = 0,
                    IsEmpty = true
                });
        }

        //add month days
        int numberOfDaysInMonth = DateTime.DaysInMonth(SelectedYear, SelectedMonth);

        for (int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new Day
                {
                    DayNumber = i + 1,
                    IsEmpty = false,
                    Date = new DateTime(SelectedYear, SelectedMonth, i + 1),
                    Events = Events.Where(e => e.Start.Date == new DateTime(SelectedYear, SelectedMonth, i + 1).Date).ToList()
                });
        }

        //calculate number of rows
        int remaning = days.Count % 7;
        if (remaning == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;

        StateHasChanged();
    }

    private void MoveMonth(MoveDirection direction)
    {
        if (direction == MoveDirection.Next)
        {
            if (SelectedMonth == 12)
            {
                selectedMonth = 1;
                SelectedYear++;
            }
            else
            {
                SelectedMonth += 1;
            }
        }
        else
        {
            if (selectedMonth == 1)
            {
                selectedMonth = 12;
                SelectedYear--;
            }
            else
            {
                SelectedMonth -= 1;
            }
        }
    }

    private enum MoveDirection
    {
        Previous,
        Next
    }
}