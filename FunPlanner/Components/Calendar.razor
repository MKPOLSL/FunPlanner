@using FunPlanner.Models.Calendar
@*@inject ICalendarEventsProvider eventsProvider*@

<!-- Calendar -->
            <div class="calendar">
                <div class="row">
                    <div class="col-sm-12 col-lg-2">
                        <select  name="" id="" class="fluent-input" @bind="SelectedYear">
                            @for (int i = 2016; i < 2024; i++)
                            {
                                <option>@i</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-12 col-lg-2">
                        <select name="" id="" class="fluent-input" @bind="SelectedMonth">
                            <option value="1">Styczeñ</option>
                            <option value="2">Luty</option>
                            <option value="3">Marzec</option>
                            <option value="4">Kwiecieñ</option>
                            <option value="5">Maj</option>
                            <option value="6">Czerwiec</option>
                            <option value="7">Lipiec</option>
                            <option value="8">Sierpieñ</option>
                            <option value="9">Wrzesieñ</option>
                            <option value="10">PaŸdziernik</option>
                            <option value="11">Listopad</option>
                            <option value="12">Grudzieñ</option>
                        </select>
                    </div>
                </div>
            <table class="calendar-table">
                <thead>
                    <tr>
                        <th>Pon.</th>
                        <th>Wt.</th>
                        <th>Œr.</th>
                        <th>Czw.</th>
                        <th>Pt.</th>
                        <th>Sob.</th>
                        <th>Niedz.</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int r = 0; r < rowsCount; r++)
                    {
                        <tr>
                            @foreach (var item in days.Skip(r * 7).Take(7))
                            {
                                <td>@DayTemplate(item)</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

@code 
{
    protected override async Task OnInitializedAsync()
    {
        //await SelectYear(new ChangeEventArgs { Value = "2021"});
        //await SelectMonth(new ChangeEventArgs { Value = "Listopad"});
        selectedYear = currentDate.Year;
        selectedMonth = currentDate.Month;
        UpdateCalendar();
    }

    private DateTime currentDate = DateTime.Now;
    private int selectedYear = 0; 
    private int selectedMonth = 0;

    private int SelectedYear {
        get => selectedYear;
        set
        {
            selectedYear = value;
            UpdateCalendar();
        }
    }

    private int SelectedMonth {
        get => selectedMonth;
        set
        {
            selectedMonth = value;
            UpdateCalendar();
        }
    }

    private Day selectedDay = new Day
    {
        Date = DateTime.Now
    };

    [Parameter]
    public RenderFragment<Day> DayTemplate { get; set; }


    private List<Day> days = new();
    private int rowsCount = 0;

    void UpdateCalendar()
    {
        days = new List<Day>();

        // Calculate the number of empty days 
        var firstDayDate = new DateTime(SelectedYear, SelectedMonth, 1); //1.11.2021
        int weekDayNumber = (int)firstDayDate.DayOfWeek; //pon -> 1
        int numberOfEmptyDays = weekDayNumber - 1;

        // Add the empty days 
        for (int i = 0; i < numberOfEmptyDays; i++)
        {
            days.Add(new Day
            {
                DayNumber = 0,
                IsEmpty = true
            });
        }

        // Add the month days 
        int numberOfDaysInMonth = DateTime.DaysInMonth(SelectedYear, SelectedMonth);

        for (int i = 0; i < numberOfDaysInMonth; i++)
        {
            days.Add(new Day
            {
                DayNumber = i + 1,
                IsEmpty = false,
                Date = new DateTime(SelectedYear, SelectedMonth, i + 1),
                Events = new List<Event>()
            });
        }

        // 2- Calcualte the number of rows 
        int remaning = days.Count % 7;
        if (remaning == 0)
            rowsCount = days.Count / 7;
        else
            rowsCount = Convert.ToInt32(days.Count / 7) + 1;

        Console.WriteLine($"Total Rows: {rowsCount} | Number of Empty Days {numberOfEmptyDays} | Month Days {numberOfDaysInMonth}");

    }

    //async Task SyncEventsFromExternalProviderToCalendar()
    //{
    //    // fetch the events for the month 
    //    var events = await eventsProvider.GetEventsInMonthAsync(year, month);

    //    if(events == null || events.Count() == 0)
    //        return; 

    //    foreach (var day in days)
    //    {
    //        if (day.IsEmpty)
    //            continue;

    //        var eventsInDay = events.Where(e => e.StartDate.Date <= day.Date && e.EndDate.Date >= day.Date);
    //        if (eventsInDay.Any())
    //        {
    //            day.Events.Add(eventsInDay);
    //        }
    //    }
    //}
}