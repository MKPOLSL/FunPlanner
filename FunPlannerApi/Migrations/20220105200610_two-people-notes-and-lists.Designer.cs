// <auto-generated />
using System;
using FunPlannerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FunPlannerApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220105200610_two-people-notes-and-lists")]
    partial class twopeoplenotesandlists
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Award", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AwardType")
                        .HasColumnType("int");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId")
                        .IsUnique();

                    b.HasIndex("PersonId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EventRegistration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimited")
                        .HasColumnType("bit");

                    b.Property<int?>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.EventParticipants", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FromPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromPersonId");

                    b.HasIndex("ToPersonId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Password", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Passwd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Award", b =>
                {
                    b.HasOne("FunPlannerShared.Data.Entities.CalendarEvent", "CalendarEvent")
                        .WithOne("Award")
                        .HasForeignKey("FunPlannerShared.Data.Entities.Award", "CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FunPlannerShared.Data.Entities.Person", "Person")
                        .WithMany("Awards")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.CalendarEvent", b =>
                {
                    b.HasOne("FunPlannerShared.Data.Entities.Person", "Creator")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.EventParticipants", b =>
                {
                    b.HasOne("FunPlannerShared.Data.Entities.CalendarEvent", "CalendarEvent")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FunPlannerShared.Data.Entities.Person", "Person")
                        .WithMany("ParticipatedEvents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Note", b =>
                {
                    b.HasOne("FunPlannerShared.Data.Entities.Person", "FromPerson")
                        .WithMany("FromNotes")
                        .HasForeignKey("FromPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FunPlannerShared.Data.Entities.Person", "ToPerson")
                        .WithMany("ToNotes")
                        .HasForeignKey("ToPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromPerson");

                    b.Navigation("ToPerson");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Password", b =>
                {
                    b.HasOne("FunPlannerShared.Data.Entities.Person", "Person")
                        .WithOne("Password")
                        .HasForeignKey("FunPlannerShared.Data.Entities.Password", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.CalendarEvent", b =>
                {
                    b.Navigation("Award");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("FunPlannerShared.Data.Entities.Person", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("CreatedEvents");

                    b.Navigation("FromNotes");

                    b.Navigation("ParticipatedEvents");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("ToNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
